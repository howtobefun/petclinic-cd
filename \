// vim: syntax=groovy
pipeline {
    agent any
    parameters {
        string(name: 'BUILD_NUMBER_TO_DELETE', defaultValue: '', description: 'Build number of the deployment to delete (leave empty for auto-cleanup)')
    }
    environment {
        DEPLOYMENT_JOB_NAME = 'petclinic-cd' // Correct job name
    }
    stages {
        stage('Determine Builds to Delete') {
            when {
                expression { params.BUILD_NUMBER_TO_DELETE == '' }
            }
            steps {
                script {
                    // Find deployments older than 1 hour
                    def buildsToDelete = []
                    def cutoffTime = new Date().time - (1 * 60 * 60 * 1000) // 1 hour ago
                    def project = Jenkins.instance.getItemByFullName(env.DEPLOYMENT_JOB_NAME)
                    if (!project) {
                        error "Project '${env.DEPLOYMENT_JOB_NAME}' not found. Please verify the job name in Jenkins."
                    }
                    // Directly access builds of the pipeline job
                    project.builds.each { build ->
                        if (build.timeInMillis < cutoffTime && build.result != hudson.model.Result.FAILURE) {
                            def metadataFile = "${build.getRootDir()}/archive/deployment-${build.number}.txt"
                            if (new File(metadataFile).exists()) {
                                buildsToDelete << build.number
                            }
                        }
                    }
                    env.BUILDS_TO_DELETE = buildsToDelete.join(',')
                    if (buildsToDelete.isEmpty()) {
                        echo "No deployments older than 1 hour found."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                    echo "Found deployments to delete: ${env.BUILDS_TO_DELETE}"
                }
            }
        }
        stage('Delete Specified Deployment') {
            when {
                expression { params.BUILD_NUMBER_TO_DELETE != '' }
            }
            steps {
                script {
                    try {
                        def namespace = "petclinic-$buildNum"
                        if (namespace) {
                            error "Namespace not found in metadata for build ${params.BUILD_NUMBER_TO_DELETE}"
                        }
                        echo "Deleting deployment for namespace: ${env.NAMESPACE}, Build: ${params.BUILD_NUMBER_TO_DELETE}"
                        sh "kubectl delete namespace ${env.NAMESPACE} || true"
                    } catch (Exception e) {
                        echo "Error deleting specified deployment for build ${params.BUILD_NUMBER_TO_DELETE}: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Delete Old Deployments') {
            when {
                expression { params.BUILD_NUMBER_TO_DELETE == '' && env.BUILDS_TO_DELETE }
            }
            steps {
                script {
                    def builds = env.BUILDS_TO_DELETE.split(',')
                    for (buildNum in builds) {
                        try {
                            def namespace = "petclinic-$buildNum"
                            
                            sh "echo ${namespace}"

                            if (!namespace) {
                                echo "Warning: Namespace not found in metadata for build ${buildNum}. Skipping."
                                continue
                            }
                            echo "Deleting old deployment for namespace: ${namespace}, Build: ${buildNum}"
                            sh "kubectl delete namespace ${namespace} || true"
                        } catch (Exception e) {
                            echo "Error deleting deployment for build ${buildNum}: ${e.message}"
                            // Continue to next build instead of failing
                        }
                    }
                }
            }
        }
        stage('Stop Minikube') {
            steps {
                sh 'minikube stop || true' // Prevent failure if Minikube is already stopped
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo "Successfully deleted deployment(s)"
        }
        failure {
            echo "Failed to delete deployment(s). Check logs for details."
        }
    }
}
