// vim: syntax=groovy
pipeline {
    agent { label 'docker-agent-2' }
    environment {
        NAMESPACE = "dev"
        CONFIG_BRANCH = "dev"
        DOCKER_REGISTRY = 'howtobefun'
        K8S_DIR = "k8s"
        SOURCE_BRANCH = 'main'
        APP_VERSION = ''
        REPO_URL = 'https://github.com/howtobefun/petclinic-cd.git'
        CREDENTIALS_ID = 'dfceac7b-78e3-463e-afef-006b2b0b334d'
    }
    stages {
        stage('Checkout Source Branch') {
            steps {
                cleanWs()
                checkout([$class: 'GitSCM',
                          branches: [[name: "refs/heads/${SOURCE_BRANCH}"]],
                          userRemoteConfigs: [[url: REPO_URL, credentialsId: CREDENTIALS_ID]],
                          extensions: [[$class: 'CloneOption', honorRefspec: true, noTags: true, shallow: false],
                                       [$class: 'CheckoutOption', timeout: 10]]])
                script {
                    echo "Current branch:"
                    sh "git branch --show-current || echo 'No branch (detached HEAD)'"
                    echo "HEAD commit:"
                    sh "git rev-parse HEAD || echo 'Failed to get HEAD commit'"
                    echo "GIT_COMMIT: ${env.GIT_COMMIT}"

                    if (!env.GIT_COMMIT) {
                        error "GIT_COMMIT environment variable not available."
                    }
                    env.APP_VERSION = env.GIT_COMMIT.take(7)
                    echo "Version from GIT_COMMIT: ${env.APP_VERSION}"
                }
            }
        }
        stage('Checkout Config Branch') {
            steps {
                cleanWs()
                checkout([$class: 'GitSCM',
                          branches: [[name: "refs/heads/${CONFIG_BRANCH}"]],
                          userRemoteConfigs: [[url: REPO_URL, credentialsId: CREDENTIALS_ID]],
                          extensions: [[$class: 'CloneOption', honorRefspec: true, noTags: true, shallow: false],
                                       [$class: 'CheckoutOption', timeout: 10]]])
                script {
                    sh "git fetch --no-tags origin ${CONFIG_BRANCH}:refs/remotes/origin/${CONFIG_BRANCH}"
                    sh "git checkout ${CONFIG_BRANCH}"
                    sh "git reset --hard origin/${CONFIG_BRANCH}"
                    sh "git clean -fdx"
                }
            }
        }
        stage('Update K8s Manifests') {
            steps {
                script {
                    def services = [
                        'config-server', 'customers-service', 'discovery-server',
                        'visits-service', 'vets-service', 'genai-service',
                        'api-gateway', 'admin-server'
                    ]
                    services.each { serviceName ->
                        def deploymentFile = "${K8S_DIR}/${serviceName}-deployment.yaml"
                        if (!fileExists(deploymentFile)) {
                            error "File not found: ${deploymentFile}"
                        }
                        def newImage = "${DOCKER_REGISTRY}/spring-petclinic-${serviceName}:${env.APP_VERSION}"
                        sh "yq eval '.spec.template.spec.containers[] | select(.name == \"${serviceName}\") | .image = \"${newImage}\"' -i ${deploymentFile}"
                    }
                }
            }
        }
        stage('Commit and Push Changes') {
            steps {
                script {
                    sshagent(['git-ssh-credentials']) {
                        sh """
                            git config user.name "Jenkins Automated Commit"
                            git config user.email "jenkins@your-jenkins-domain.com" 

                            git remote set-url origin git@github.com:howtobefun/petclinic-cd.git

                            git add ${env.K8S_DIR}/

                            # Check if there are changes to commit
                            if git diff --staged --quiet; then
                                echo "No changes to commit."
                            else
                                echo "Changes detected, committing and pushing via SSH..."
                                git commit -m "Update ${env.NAMESPACE} images to ${env.APP_VERSION}"

                                git push origin ${env.CONFIG_BRANCH}
                            fi

                            # Optional: Change the remote URL back to HTTPS if you need it for later stages
                            # git remote set-url origin ${env.REPO_URL}
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo "Updated manifests for ${NAMESPACE} with version ${env.APP_VERSION}"
        }
        failure {
            echo "Failed to update manifests for ${NAMESPACE}"
        }
    }
}
