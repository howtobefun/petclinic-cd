// vim: syntax=groovy
pipeline {
    agent any
    parameters {
        string(name: 'customers_service_branch', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'vets_service_branch', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'visits_service_branch', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'genai_service_branch', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'admin_server_branch', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'api_gateway_branch', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'config_server_branch', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'discovery_server_branch', defaultValue: 'main', description: 'Branch for discovery-server')
    }
    environment {
        NAMESPACE = "petclinic-${BUILD_NUMBER}"
    }
    stages {
        stage('Start Minikube') {
            steps {
                sh 'minikube delete'
                sh 'minikube start --driver=docker'
                sh 'kubectl config use-context minikube'
                script {
                    env.MINIKUBE_IP = sh(script: 'minikube ip', returnStdout: true).trim()
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out your repository configured in the Jenkins job."
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }
        stage('Get Commit IDs') {
            steps {
                script {
                    env.CUSTOMERS_SERVICE_TAG = getCommitId('customers-service', params.customers_service_branch)
                    env.VETS_SERVICE_TAG = getCommitId('vets-service', params.vets_service_branch)
                    env.VISITS_SERVICE_TAG = getCommitId('vets-service', params.visits_service_branch)
                    env.GENAI_SERVICE_TAG = getCommitId('genai-service', params.genai_service_branch)
                    env.ADMIN_SERVER_TAG = getCommitId('admin-server', params.admin_server_branch)
                    env.API_GATEWAY_TAG = getCommitId('api-gateway', params.api_gateway_branch)
                    env.CONFIG_SERVER_TAG = getCommitId('config-server', params.config_server_branch)
                    env.DISCOVERY_SERVER_TAG = getCommitId('discovery-server', params.discovery_server_branch)
                }
            }
        }
        stage('Create Namespace') {
            steps {
                script {
                    sh "kubectl get namespace | grep -q \"^${env.NAMESPACE}\" || kubectl create namespace ${env.NAMESPACE}"                }
            }
        }
        stage('Delete all pods') {
            steps {
                script {
                    sh "kubectl delete pods --all -n ${env.NAMESPACE}"
                }
            }
        }
        stage('Deploy to Minikube') {
            steps {
                script {
                    
                    def deployScript = ""

                    // Deploy config-server
                    def configImage = "howtobefun/spring-petclinic-config-server:${env.CONFIG_SERVER_TAG}"
                    deployScript += """
                        echo "Deploying config-server with image tag ${env.CONFIG_SERVER_TAG}"
                        kubectl apply -f k8s/config-server-deployment.yaml -n ${env.NAMESPACE}
                        kubectl set image deployment/config-server config-server=${configImage} -n ${env.NAMESPACE}
                        kubectl apply -f k8s/config-server-service.yaml -n ${env.NAMESPACE}
                        echo "Waiting for config-server rollout to complete..."
                        kubectl rollout status deployment/config-server -n ${env.NAMESPACE} --timeout=120s
                    """

                    // Deploy discovery-server
                    def discoveryImage = "howtobefun/spring-petclinic-discovery-server:${env.DISCOVERY_SERVER_TAG}"
                    deployScript += """
                        echo "Deploying discovery-server with image tag ${env.DISCOVERY_SERVER_TAG}"
                        kubectl apply -f k8s/discovery-server-deployment.yaml -n ${env.NAMESPACE}
                        kubectl set image deployment/discovery-server discovery-server=${discoveryImage} -n ${env.NAMESPACE}
                        kubectl apply -f k8s/discovery-server-service.yaml -n ${env.NAMESPACE}
                        echo "Waiting for discovery-server rollout to complete..."
                        kubectl rollout status deployment/discovery-server -n ${env.NAMESPACE} --timeout=120s
                    """

                    // Deploy remaining services
                    ['api-gateway', 'admin-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service'].each { service ->
                        def tagEnvVar = "${service.replace('-', '_').toUpperCase()}_TAG"
                        def imageName = "howtobefun/spring-petclinic-${service}:${env[tagEnvVar]}"
                        deployScript += """
                            echo "Deploying ${service} with image tag ${env[tagEnvVar]}"
                            kubectl apply -f k8s/${service}-deployment.yaml -n ${env.NAMESPACE}
                            kubectl set image deployment/${service} ${service}=${imageName} -n ${env.NAMESPACE}
                            kubectl apply -f k8s/${service}-service.yaml -n ${env.NAMESPACE}
                            kubectl rollout status deployment/${service} -n ${env.NAMESPACE} --timeout=120s
                        """
                    }

                    sh """
                        ${deployScript}
                    """
                }
            }
        }
        stage('Store Deployment Metadata') {
            steps {
                script {
                    writeFile file: "petclinic-cd/deployment-${env.BUILD_NUMBER}.txt", text: """
                        NAMESPACE=${env.NAMESPACE}
                        MINIKUBE_IP=${env.MINIKUBE_IP}
                        BUILD_NUMBER=${env.BUILD_NUMBER}
                    """
                    archiveArtifacts artifacts: "deployment-${env.BUILD_NUMBER}.txt", allowEmptyArchive: false
                }
            }
        }
        stage('Post-Deployment Instructions') {
            steps {
                sh "kubectl get pods -n ${env.NAMESPACE}"

                echo "Deployment successful for build ${env.BUILD_NUMBER}"
                echo "To access the Petclinic application:"
                echo "1. Add the following to your /etc/hosts file:"
                echo "   ${env.MINIKUBE_IP} petclinic.local"
                echo "2. Access the services in your browser using the following URLs:"
                echo "   - Customers Service: http://petclinic.local:30001"
                echo "   - Vets Service: http://petclinic.local:30002"
                echo "   - Visits Service: http://petclinic.local:30003"
                echo "   - Genai Service: http://petclinic.local:30004"
                echo "   - API Gateway: http://petclinic.local:30005"
                echo "   - Discovery Server: http://petclinic.local:30006"
                echo "   - Config Server: http://petclinic.local:30007"
                echo "   - Admin Server: http://petclinic.local:30008"
                echo "3. To delete this deployment, click this link:"
                echo "${env.JENKINS_URL}job/delete-deployment/buildWithParameters?BUILD_NUMBER_TO_DELETE=${env.BUILD_NUMBER}"
            }
        }
    }
    post {
        always {
            cleanWs()
            // Minikube is not stopped, allowing services to remain accessible
        }
        failure {
            echo "Deployment failed. To clean up, click: ${env.JENKINS_URL}job/delete-deployment/buildWithParameters?BUILD_NUMBER_TO_DELETE=${env.BUILD_NUMBER}"
        }
    }
}

def getCommitId(serviceName, branch) {
    def repoUrl = scm.userRemoteConfigs[0].url
    def cleanBranch = branch.trim()
    def commitId = sh(
        script: "git ls-remote ${repoUrl} refs/heads/${cleanBranch} | cut -f 1 | head -n 1",
        returnStdout: true
    ).trim().take(7)

    def tag = ""
    if (cleanBranch == "main") {
        tag = "latest"
    } else {
        tag = "${cleanBranch}-${commitId}"
    }

    echo "Service: ${serviceName}, Branch: ${cleanBranch}, Commit ID: ${commitId}, Tag: ${tag}"
    return tag
}
