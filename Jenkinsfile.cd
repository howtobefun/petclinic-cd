// vim: syntax=groovy
pipeline {
    agent any
    parameters {
        string(name: 'customers_service_branch', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'vets_service_branch', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'visits_service_branch', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'genai_service_branch', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'admin_server_branch', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'api_gateway_branch', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'config_server_branch', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'discovery_server_branch', defaultValue: 'main', description: 'Branch for discovery-server')
    }
    stages {
        stage('Start Minikube') {
            steps {
                sh 'minikube start --driver=docker --force'
                sh 'kubectl config use-context minikube'
                script {
                    env.MINIKUBE_IP = sh(script: 'minikube ip', returnStdout: true).trim()
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out your repository configured in the Jenkins job."
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }
        stage('Deploy to Minikube') {
            steps {
                script {
                    def tag = 'latest' // Use 'latest' tag for simplicity and consistency
                    def deployScript = ""
                    def services = [
                        'customers-service': params.customers_service_branch,
                        'vets-service': params.vets_service_branch,
                        'visits-service': params.visits_service_branch,
                        'genai-service': params.genai_service_branch,
                        'admin-server': params.admin_server_branch,
                        'api-gateway': params.api_gateway_branch,
                        'config-server': params.config_server_branch,
                        'discovery-server': params.discovery_server_branch
                    ]

                    // Deploy config-server first
                    def configImage = "howtobefun/spring-petclinic-config-server:${tag}"
                    deployScript += """
                        echo "Deploying config-server with image tag ${tag}"
                        kubectl apply -f k8s/config-server-deployment.yaml -n default
                        kubectl set image deployment/config-server config-server=${configImage} -n default
                        kubectl apply -f k8s/config-server-service.yaml -n default
                        echo "Waiting for config-server rollout to complete..."
                        kubectl rollout status deployment/config-server -n default --timeout=120s
                    """

                    // Deploy discovery-server next
                    def discoveryImage = "howtobefun/spring-petclinic-discovery-server:${tag}"
                    deployScript += """
                        echo "Deploying discovery-server with image tag ${tag}"
                        kubectl apply -f k8s/discovery-server-deployment.yaml -n default
                        kubectl set image deployment/discovery-server discovery-server=${discoveryImage} -n default
                        kubectl apply -f k8s/discovery-server-service.yaml -n default
                        echo "Waiting for discovery-server rollout to complete..."
                        kubectl rollout status deployment/discovery-server -n default --timeout=120s
                    """

                    // Deploy remaining services
                    ['api-gateway', 'admin-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service'].each { service ->
                        def imageName = "howtobefun/spring-petclinic-${service}:${tag}"
                        deployScript += """
                            echo "Deploying ${service} with image tag ${tag}"
                            kubectl apply -f k8s/${service}-deployment.yaml -n default
                            kubectl set image deployment/${service} ${service}=${imageName} -n default
                            kubectl apply -f k8s/${service}-service.yaml -n default
                        """
                    }

                    sh """
                        ${deployScript}
                    """
                }
            }
        }
        stage('Post-Deployment Instructions') {
            steps {
                echo "To access the Petclinic application:"
                echo "1. Add the following to your /etc/hosts file:"
                echo "   ${env.MINIKUBE_IP} petclinic.local"
                echo "2. Access the services in your browser using the following URLs:"
                echo "   - Customers Service: http://petclinic.local:30001"
                echo "   - Vets Service: http://petclinic.local:30002"
                echo "   - Visits Service: http://petclinic.local:30003"
                echo "   - Genai Service: http://petclinic.local:30004"
                echo "   - API Gateway: http://petclinic.local:30005"
                echo "   - Discovery Server: http://petclinic.local:30006"
                echo "   - Config Server: http://petclinic.local:30007"
                echo "   - Admin Server: http://petclinic.local:30008"
            }
        }
    }
    post {
        always {
            sh 'minikube stop || true'
            cleanWs()
        }
    }
}
