// vim: syntax=groovy
pipeline {
    agent any
    parameters {
        string(name: 'customers_service_branch', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'vets_service_branch', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'visits_service_branch', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'genai_service_branch', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'admin_server_branch', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'api_gateway_branch', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'config_server_branch', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'discovery_server_branch', defaultValue: 'main', description: 'Branch for discovery-server')
    }
    environment {
        MAVEN_OPTS = "-Dmaven.repo.local=.m2/repository"
        MINIKUBE_IP = "192.168.49.2" // Ensure this matches your Minikube IP; consider retrieving dynamically if needed
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Deploy to Minikube') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        // Set the KUBECONFIG environment variable
                        env.KUBECONFIG = KUBECONFIG_FILE

                        // Define all services and their branches
                        def servicesBranches = [
                            'customers-service': params.customers_service_branch,
                            'vets-service': params.vets_service_branch,
                            'visits-service': params.visits_service_branch,
                            'genai-service': params.genai_service_branch,
                            'admin-server': params.admin_server_branch,
                            'api-gateway': params.api_gateway_branch,
                            'config-server': params.config_server_branch,
                            'discovery-server': params.discovery_server_branch
                        ]

                        // Generate shell script dynamically
                        def deployScript = ""
                        servicesBranches.each { service, branch ->
                            def imageName = "howtobefun/spring-petclinic-${service}:${branch}"
                            deployScript += """
                                echo "Deploying ${service} with branch ${branch}"
                                kubectl apply -f k8s/${service}-deployment.yaml -n default
                                kubectl set image deployment/${service} ${service}=${imageName} -n default
                                kubectl apply -f k8s/${service}-service.yaml -n default
                            """
                        }

                        // Execute the shell script with KUBECONFIG set securely
                        sh """
                            ${deployScript}
                        """
                    }
                }
            }
        }
        stage('Post-Deployment Instructions') {
            steps {
                echo "To access the Petclinic application:"
                echo "1. Add the following to your /etc/hosts file:"
                echo "   ${env.MINIKUBE_IP} petclinic.local"
                echo "2. Access the services in your browser using the following URLs:"
                echo "   - Customers Service: http://petclinic.local:30001"
                echo "   - Vets Service: http://petclinic.local:30002"
                echo "   - Visits Service: http://petclinic.local:30003"
                echo "   - Genai Service: http://petclinic.local:30004"
                echo "   - API Gateway: http://petclinic.local:30005"
                echo "   - Discovery Server: http://petclinic.local:30006"
                echo "   - Config Server: http://petclinic.local:30007"
                echo "   - Admin Server: http://petclinic.local:30008"
                echo "   - Zipkin Server: http://petclinic.local:30009"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
