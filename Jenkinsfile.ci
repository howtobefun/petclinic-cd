// vim: syntax=groovy
pipeline {
    agent any
    environment {
        MAVEN_OPTS = "-Dmaven.repo.local=.m2/repository"
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs() // Clean workspace to avoid stale Git data
                checkout scm
            }
        }
        stage('Detect Changes') {
            steps {
                script {
                    // Set COMMIT_ID
                    env.COMMIT_ID = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                    // Debug: Print all environment variables
                    echo "Environment variables:"
                    sh 'env | sort'

                    // Get all changed files
                    def changes = []
                    try {
                        if (env.CHANGE_TARGET) {
                            // Pull request scenario
                            sh """
                                git fetch --no-tags origin ${env.CHANGE_TARGET}:refs/remotes/origin/${env.CHANGE_TARGET} || true
                                git fetch --no-tags origin ${env.GIT_COMMIT}:refs/remotes/origin/PR-${env.CHANGE_ID} || true
                            """
                            changes = sh(script: "git diff --name-only origin/${env.CHANGE_TARGET} HEAD || true", returnStdout: true).trim()
                            changes = changes ? changes.split('\n') : []
                        } else if (env.GIT_PREVIOUS_SUCCESSFUL_COMMIT) {
                            // Regular branch with previous successful commit
                            changes = sh(script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT} HEAD || true", returnStdout: true).trim()
                            changes = changes ? changes.split('\n') : []
                        } else {
                            // Fallback: compare with parent commit or assume full build
                            echo "No previous commit available. Comparing with HEAD^ or assuming full build."
                            changes = sh(script: "git diff --name-only HEAD^ HEAD || true", returnStdout: true).trim()
                            changes = changes ? changes.split('\n') : []
                        }
                    } catch (Exception e) {
                        echo "Error detecting changes: ${e.message}. Assuming all services need to be built."
                        changes = sh(script: "git ls-files", returnStdout: true).trim().split('\n')
                    }

                    // Map to store which services need to be built
                    def servicesToBuild = [:]
                    def services = [
                        'admin-server': 'spring-petclinic-admin-server',
                        'api-gateway': 'spring-petclinic-api-gateway',
                        'config-server': 'spring-petclinic-config-server',
                        'customers-service': 'spring-petclinic-customers-service',
                        'discovery-server': 'spring-petclinic-discovery-server',
                        'vets-service': 'spring-petclinic-vets-service',
                        'visits-service': 'spring-petclinic-visits-service',
                        'genai-service': 'spring-petclinic-genai-service'
                    ]

                    // Check root pom.xml changes
                    boolean rootPomChanged = changes.any { it == 'pom.xml' }

                    // Check shared resources changes
                    boolean sharedResourcesChanged = changes.any { change ->
                        change.startsWith('docker/') ||
                        change.startsWith('scripts/') ||
                        change.startsWith('.mvn/') ||
                        change == 'docker-compose.yml'
                    }

                    // If shared resources changed, root pom changed, or main branch, build all services
                    if (rootPomChanged || sharedResourcesChanged || env.BRANCH_NAME == 'main') {
                        echo "Shared resources changed, root pom changed, or main branch. Building all services."
                        services.each { serviceKey, servicePath ->
                            servicesToBuild[serviceKey] = true
                        }
                    } else {
                        services.each { serviceKey, servicePath ->
                            if (changes.any { change ->
                                change.startsWith("${servicePath}/")
                            }) {
                                servicesToBuild[serviceKey] = true
                                echo "Will build ${serviceKey} due to changes in ${servicePath}"
                            }
                        }
                    }

                    // If no services need building, set a flag
                    env.NO_SERVICES_TO_BUILD = servicesToBuild.isEmpty() ? 'true' : 'false'
                    env.SERVICES_TO_BUILD = servicesToBuild.keySet().join(',')

                    // Print summary
                    if (env.NO_SERVICES_TO_BUILD == 'true') {
                        echo "No service changes detected. Pipeline will skip build and test stages."
                    } else {
                        echo "Services to build: ${env.SERVICES_TO_BUILD}"
                    }
                }
            }
        }

        stage('Build') {
            when {
                expression { env.NO_SERVICES_TO_BUILD == 'false' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                                                    usernameVariable: 'DOCKER_USERNAME',
                                                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"

                        env.SERVICES_TO_BUILD.split(',').each { service ->
                            echo "Building ${service}..."
                            try {
                                sh """
                                    echo "Building ${service}"
                                    ./mvnw clean install -PbuildDocker -pl spring-petclinic-${service}
                                """

                                def baseImageName = "${env.DOCKER_USERNAME}/spring-petclinic-${service}"

                                sh "docker tag ${baseImageName}:latest ${baseImageName}:${env.COMMIT_ID}"

                                echo "Pushing ${baseImageName}:latest and ${baseImageName}:${env.COMMIT_ID} to Docker Hub"
                                sh "docker push ${baseImageName}:latest"
                                sh "docker push ${baseImageName}:${env.COMMIT_ID}"
                            } catch (Exception e) {
                                echo "Build failed for ${service}: ${e.message}"
                                sh "docker rmi ${baseImageName}:latest ${baseImageName}:${env.COMMIT_ID} || true"
                                throw e
                            }
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs()
                }
            }
        }
    }
}
